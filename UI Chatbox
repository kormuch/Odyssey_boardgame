import pygame
import pygame.freetype
import time

# Initialize Pygame
pygame.init()

# Constants for colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
DARK_GRAY = (169, 169, 169)
LIGHT_GRAY = (211, 211, 211)

# Set up the display
screen_width, screen_height = 400, 200
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Pygame Prompt Box')

# Font for text rendering
font = pygame.freetype.Font(None, 24)

# Input box parameters
input_box_width, input_box_height = 250, 30
input_box_x, input_box_y = 50, 50
input_box_rect = pygame.Rect(input_box_x, input_box_y, input_box_width, input_box_height)
input_text = ''

# Button parameters
button_width, button_height = 80, 30
button_x, button_y = input_box_x + input_box_width + 20, input_box_y
button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
shadow_offset = 3

# Blinking cursor parameters
cursor_width = 2
cursor_color = BLACK
cursor_visible = True
cursor_index = 0  # Initial cursor position at the beginning of the text
cursor_timer = time.time()

# Flag to track text input focus
input_active = False
button_pressed = False

# Main loop
running = True
while running:
    current_time = time.time()
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if input_active:
                if event.key == pygame.K_RETURN:
                    print(f"Entered text: {input_text}")
                    input_text = ''  # Clear the input box
                    cursor_index = 0  # Reset cursor position
                    input_active = False
                elif event.key == pygame.K_BACKSPACE:
                    if cursor_index > 0:
                        input_text = input_text[:cursor_index-1] + input_text[cursor_index:]
                        cursor_index -= 1
                elif event.key == pygame.K_LEFT:
                    if cursor_index > 0:
                        cursor_index -= 1
                elif event.key == pygame.K_RIGHT:
                    if cursor_index < len(input_text):
                        cursor_index += 1
                else:
                    input_text = input_text[:cursor_index] + event.unicode + input_text[cursor_index:]
                    cursor_index += 1
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left mouse button
                # Check if the mouse click is inside the input box
                if input_box_rect.collidepoint(event.pos):
                    input_active = True
                    # Calculate cursor position based on mouse click
                    cursor_index = len(input_text)
                    cursor_pos = font.get_rect(input_text)[2]  # Get width of rendered text
                    while cursor_pos < event.pos[0] and cursor_index < len(input_text):
                        cursor_index += 1
                        cursor_pos = font.get_rect(input_text[:cursor_index])[2] + input_box_x
                    while cursor_pos > event.pos[0] and cursor_index > 0:
                        cursor_index -= 1
                        cursor_pos = font.get_rect(input_text[:cursor_index])[2] + input_box_x
                else:
                    input_active = False
                # Check if the mouse click is inside the button
                if button_rect.collidepoint(event.pos):
                    button_pressed = True
        elif event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:  # Left mouse button
                if button_rect.collidepoint(event.pos) and button_pressed:
                    print(f"Entered text: {input_text}")
                    input_text = ''  # Clear the input box
                    cursor_index = 0  # Reset cursor position
                button_pressed = False

    # Clear the screen
    screen.fill(WHITE)

    # Draw the input box
    pygame.draw.rect(screen, BLACK, input_box_rect, 2)
    if input_active:
        pygame.draw.rect(screen, GRAY, input_box_rect)
        # Blinking cursor logic
        if current_time - cursor_timer > 0.5:  # Change cursor visibility every 0.5 seconds
            cursor_visible = not cursor_visible
            cursor_timer = current_time
        if cursor_visible:
            cursor_pos = font.get_rect(input_text[:cursor_index])[2]  # Get width of rendered text up to cursor_index
            pygame.draw.rect(screen, cursor_color, pygame.Rect(input_box_x + cursor_pos + 5, input_box_y + 5, cursor_width, input_box_height - 10))
    font.render_to(screen, (input_box_x + 5, input_box_y + 5), input_text, BLACK)

    # Draw the button with shadow only if pressed
    if button_pressed:
        pygame.draw.rect(screen, DARK_GRAY, (button_x + shadow_offset, button_y + shadow_offset, button_width, button_height))
    pygame.draw.rect(screen, LIGHT_GRAY, button_rect)
    pygame.draw.rect(screen, BLACK, button_rect, 2)
    font.render_to(screen, (button_x + 10, button_y + 8), 'Enter', BLACK)

    # Update the display
    pygame.display.flip()

# Quit Pygame
pygame.quit()
